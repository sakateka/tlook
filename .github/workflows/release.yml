name: Release

on:
  push:
    tags:
      - 'v*'

# Prevent multiple releases from running simultaneously
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

permissions:
  contents: write
  packages: write

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  build-and-release:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            asset_name: tlook-linux-x86_64
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            asset_name: tlook-linux-x86_64-musl
          - os: macos-latest
            target: x86_64-apple-darwin
            asset_name: tlook-macos-x86_64
          - os: macos-latest
            target: aarch64-apple-darwin
            asset_name: tlook-macos-aarch64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            asset_name: tlook-windows-x86_64.exe

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install musl tools (Linux musl only)
        if: matrix.target == 'x86_64-unknown-linux-musl'
        run: sudo apt-get update && sudo apt-get install -y musl-tools

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ matrix.target }}-
            ${{ runner.os }}-cargo-

      - name: Build binary
        run: cargo build --release --target ${{ matrix.target }}

      - name: Strip binary (Unix)
        if: matrix.os != 'windows-latest'
        run: strip target/${{ matrix.target }}/release/tlook

      - name: Prepare binary (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          mkdir -p release
          cp target/${{ matrix.target }}/release/tlook release/${{ matrix.asset_name }}

      - name: Prepare binary (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          mkdir release
          copy target\${{ matrix.target }}\release\tlook.exe release\${{ matrix.asset_name }}

      - name: Upload binaries to release
        uses: softprops/action-gh-release@v2
        with:
          files: release/${{ matrix.asset_name }}

  create-release-notes:
    needs: build-and-release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate changelog
        id: changelog
        run: |
          # Extract version from tag
          VERSION=${GITHUB_REF#refs/tags/}
          echo "version=$VERSION" >> $GITHUB_OUTPUT

          # Generate simple changelog from git commits
          if [ "$VERSION" != "v0.1.0" ]; then
            PREV_TAG=$(git tag --sort=-version:refname | head -2 | tail -1)
            echo "## Changes" > changelog.md
            git log --pretty=format:"- %s" $PREV_TAG..HEAD >> changelog.md
          else
            echo "## Initial Release" > changelog.md
            echo "First release of tlook - Terminal Metrics Visualizer" >> changelog.md
          fi

          # Add installation instructions
          cat >> changelog.md << 'EOF'

          ## Installation

          Download the appropriate binary for your platform:

          - **Linux x86_64**: `tlook-linux-x86_64`
          - **Linux x86_64 (musl)**: `tlook-linux-x86_64-musl` (static binary)
          - **macOS x86_64**: `tlook-macos-x86_64`
          - **macOS ARM64**: `tlook-macos-aarch64`
          - **Windows x86_64**: `tlook-windows-x86_64.exe`

          Make the binary executable and optionally move it to your PATH:
          ```bash
          chmod +x tlook-*
          sudo mv tlook-* /usr/local/bin/tlook
          ```

          ## Usage

          ```bash
          # Monitor CPU usage
          tlook -c "top -bn1 | grep 'Cpu(s)' | awk '{print \"cpu=\" \$2}' | tr -d '%us,'"

          # Monitor multiple metrics
          tlook -c "free | awk '/^Mem:/ {printf \"memory=%.1f\\n\", \$3/\$2*100}'" --interval 2
          ```

          See the [README](https://github.com/${{ github.repository }}) for more examples!
          EOF

      - name: Update Release with changelog
        uses: softprops/action-gh-release@v2
        with:
          body_path: changelog.md
          append_body: false
